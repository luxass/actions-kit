// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`expect \`actions-kit.d.ts\` to be generated 1`] = `
"// generated by 'actions-kit'
        import "@actions/core";

        

declare module "@actions/core" {

  type InputNames = "type" | "who-to-greet";

  export function getInput(name: InputNames, options?: InputOptions): string;
}
"
`;

exports[`expect \`actions-kit.d.ts\` to be generated 2`] = `
""use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var core = __toESM(require("@actions/core"), 1);
async function run() {
  const type = core.getInput("type");
  const whoToGreet = core.getInput("who-to-greet");
  const message = \`Hello \${whoToGreet}!\`;
  core.info(message);
  if (type === "error") {
    core.setFailed("This is an error!");
  }
  core.setOutput("message", message);
}
run().catch((err) => {
  console.error(err);
  core.setFailed(err.message);
});
"
`;

exports[`expect \`actions-kit.d.ts\` to include \`ACTION_INPUTS\` 1`] = `
"// generated by 'actions-kit'
        import "@actions/core";

        
declare global {
  export const ACTION_INPUTS: {
  "type": "type",
  "who-to-greet": "who-to-greet"
};
}

declare module "@actions/core" {

  type InputNames = "type" | "who-to-greet";

  export function getInput(name: InputNames, options?: InputOptions): string;
}
"
`;

exports[`expect \`actions-kit.d.ts\` to include \`ACTION_INPUTS\` 2`] = `
""use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var core = __toESM(require("@actions/core"), 1);
globalThis.ACTION_INPUTS = {
  "type": "type",
  "who-to-greet": "who-to-greet"
};
async function run() {
  const type = core.getInput("type");
  const whoToGreet = core.getInput("who-to-greet");
  const message = \`Hello \${whoToGreet}!\`;
  core.info(message);
  if (type === "error") {
    core.setFailed("This is an error!");
  }
  core.setOutput("message", message);
}
run().catch((err) => {
  console.error(err);
  core.setFailed(err.message);
});
;
"
`;
