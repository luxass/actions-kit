import { readFile } from "node:fs/promises";
import { dirname, join } from "node:path";
import { existsSync, readFileSync, writeFileSync } from "node:fs";
import YAML from "js-yaml";
import { type UnpluginFactory, type UnpluginInstance, createUnplugin } from "unplugin";
import { createFilter } from "@rollup/pluginutils";

export interface ActionsKitOptions {
  actionPath?: string;
}

/**
 * A unplugin factory, used by Unplugin to create a new plugin instance.
 */
export const unpluginFactory: UnpluginFactory<ActionsKitOptions | undefined> = (options = {}) => {
  return {
    name: "unplugin-actions-kit",
    enforce: "pre",
    buildStart() {
      // eslint-disable-next-line no-console
      console.log("buildStart", options);

      if (options.actionPath == null) {
        // check if either action.yml or action.yaml exists
        const actionYmlPath = join(import.meta.dirname, "action.yml");
        const actionYamlPath = join(import.meta.dirname, "action.yaml");

        if (existsSync(actionYmlPath)) {
          options.actionPath = actionYmlPath;
        } else if (existsSync(actionYamlPath)) {
          options.actionPath = actionYamlPath;
        } else {
          throw new Error("action.yml or action.yaml is required");
        }
      }

      // read the file
      const yaml = YAML.load(readFileSync(options.actionPath, "utf8"));

      if (yaml == null) {
        throw new Error("action.yml or action.yaml is empty");
      }

      if (typeof yaml !== "object") {
        throw new TypeError("action.yml or action.yaml is not an object");
      }

      if (!("inputs" in yaml) || typeof yaml.inputs !== "object" || yaml.inputs == null) {
        throw new TypeError("action.yml or action.yaml does not have inputs");
      }

      writeFileSync("./actions-kit.d.ts", `// generated by 'actions-kit'
import "@actions/core";

declare module "@actions/core" {
  export const inputs = ${JSON.stringify({
    ...Object.fromEntries(
      Object.entries(yaml.inputs).map(([name]) => {
        return [name, name];
      }),
    ),
  }, null, 2)} as const;

  type InputNames = ${Object.keys(yaml.inputs).map((name) => JSON.stringify(name)).join(" | ")};

  export function getInput(name: InputNames, options?: InputOptions): string;
}
`);
    },
  };
};

/**
 * The main unplugin instance.
 */
export const unplugin: UnpluginInstance<ActionsKitOptions | undefined, boolean> = /* #__PURE__ */ createUnplugin(unpluginFactory);

export default unplugin;
